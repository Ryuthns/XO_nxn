{"ast":null,"code":"var _jsxFileName = \"/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js\";\nimport Board from \"./Board\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(0).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: 0,\n      allow: false\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n  calculateWinner(squares) {\n    let length = this.state.grid_num;\n    let needed = length - 1;\n    const lines = []; //horizontal\n\n    for (let i = 0; i < length * length; i += length) {} //vertical\n\n\n    for (let i = 0; i < length; i++) {} //diagonal upper left - lower right\n\n\n    for (let i = 0; i < length; i++) {} //diagonal lower left - upper right\n\n\n    for (let i = 0; i < length; i++) {} // const lines = [\n    //   [0, 1, 2],\n    //   [3, 4, 5],\n    //   [6, 7, 8],\n    //   [0, 3, 6],\n    //   [1, 4, 7],\n    //   [2, 5, 8],\n    //   [0, 4, 8],\n    //   [2, 4, 6],\n    // ];\n    // for (let i = 0; i < lines.length; i++) {\n    //   const [a, b, c] = lines[i];\n    //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    //     return squares[a];\n    //   }\n    // }\n    // return null;\n\n  }\n\n  handleInput(e) {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(e.target.value * e.target.value).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: e.target.value,\n      allow: false\n    });\n  }\n\n  handleButton() {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(this.state.grid_num * this.state.grid_num).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      allow: true\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"inputField\",\n          onChange: this.handleInput,\n          min: 3 // ref={node => (this.inputNode = node)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButton,\n          className: \"btn btn-success\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          grid_num: this.state.grid_num,\n          allow: this.state.allow,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js"],"names":["Board","React","Game","Component","constructor","props","state","history","squares","Array","fill","stepNumber","xIsNext","grid_num","allow","handleInput","bind","handleButton","calculateWinner","length","needed","lines","i","e","setState","target","value","handleClick","slice","current","concat","jumpTo","step","render","winner","moves","map","move","desc","status"],"mappings":"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","sourcesContent":["import Board from \"./Board\"\nimport React from \"react\";\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: [{\n            squares: Array(0).fill(null),\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num : 0,\n          allow: false,\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    calculateWinner(squares) {\n      let length = this.state.grid_num\n      let needed = length-1\n      const lines = []\n\n      //horizontal\n      for (let i = 0; i < length*length; i+=length) {\n             \n      }\n\n       //vertical\n       for (let i = 0; i < length; i++) {\n        \n     }\n  \n      //diagonal upper left - lower right\n      for (let i = 0; i < length; i++) {\n         \n      }\n  \n      //diagonal lower left - upper right\n       for (let i = 0; i < length; i++) {\n      \n      }\n    \n      \n      // const lines = [\n      //   [0, 1, 2],\n      //   [3, 4, 5],\n      //   [6, 7, 8],\n      //   [0, 3, 6],\n      //   [1, 4, 7],\n      //   [2, 5, 8],\n      //   [0, 4, 8],\n      //   [2, 4, 6],\n      // ];\n      // for (let i = 0; i < lines.length; i++) {\n      //   const [a, b, c] = lines[i];\n      //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      //     return squares[a];\n      //   }\n      // }\n      // return null;\n    }\n\n    handleInput(e){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(e.target.value*e.target.value).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num: e.target.value,\n          allow: false\n        })\n        \n    }\n\n    handleButton(){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(this.state.grid_num*this.state.grid_num).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          allow: true\n        })\n    }\n   \n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares) || squares[i]) {\n          return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n          history: history.concat([{\n            squares: squares,\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n      });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = this.calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n          const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n          return (\n            <li>\n              <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        });\n\n        let status;\n        if (winner) {\n        status = 'Winner: ' + winner;\n        } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n              <div className=\"input\">\n                <input\n                  type=\"number\"\n                  name=\"inputField\"\n                  onChange={this.handleInput}\n                  min={3}\n                  // ref={node => (this.inputNode = node)}\n                />\n                <button onClick={this.handleButton} className=\"btn btn-success\">\n                  Create\n                </button>\n              </div>\n              <div className=\"game-board\">\n                <Board\n                  squares={current.squares}\n                  grid_num={this.state.grid_num}\n                  allow={this.state.allow}\n                  onClick={(i) => this.handleClick(i)}\n                />\n              </div>\n              <div className=\"game-info\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n              </div>\n            </div>\n        );\n    }\n  }\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}