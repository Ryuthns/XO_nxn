{"ast":null,"code":"var _jsxFileName = \"/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js\";\nimport Board from \"./Board\";\nimport React from \"react\";\nimport { paste } from \"@testing-library/user-event/dist/paste\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(3).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: 0,\n      allow: false\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n  }\n\n  calculateWinner(squares) {\n    let n = parseInt(this.state.grid_num);\n    let patterns = []; //horizontal\n\n    for (let i = 0; i < n * n; i = i + n) {\n      let temp = [];\n      temp = squares.slice(i, i + n);\n      patterns.push(temp);\n    } //vertical\n\n\n    for (let i = 0; i < n; i++) {\n      let temp = [];\n\n      for (let j = 0; j < n; j++) {\n        temp.push(patterns[j][i]);\n      }\n\n      patterns.push(temp);\n    } //diagonal\n\n\n    let temp = [];\n\n    for (let i = 0; i < n; i++) {\n      temp.push(patterns[i][i]);\n    }\n\n    patterns.push(temp); //anti-diagonal\n\n    temp = [];\n\n    for (let i = 0; i < n; i++) {\n      temp.push(patterns[i][n - i - 1]);\n    }\n\n    patterns.push(temp); //debug\n\n    console.log(patterns.length); //2*n+2\n\n    for (let i = 0; i < patterns.length; i++) {\n      console.log(patterns[i]);\n    } //check winner\n\n\n    for (let i = 0; i < patterns.length; i++) {\n      let emptyboard = patterns[i].every(val => val == null);\n      let winnerIsX = patterns[i].every(val => val == \"X\");\n      let winnerIsO = patterns[i].every(val => val == \"O\");\n\n      if (winnerIsX) {\n        if (emptyboard) {\n          return null;\n        }\n\n        return \"X\";\n      } else if (winnerIsO) {\n        if (emptyboard) {\n          return null;\n        }\n\n        return \"O\";\n      }\n    }\n\n    return null;\n  }\n\n  handleInput(e) {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(e.target.value * e.target.value).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: e.target.value,\n      allow: false\n    });\n  }\n\n  handleButton() {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(this.state.grid_num * this.state.grid_num).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      allow: true\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"inputField\",\n          onChange: this.handleInput,\n          value: this.state.grid_num,\n          min: 3 // ref={node => (this.inputNode = node)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButton,\n          className: \"btn btn-success\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          grid_num: this.state.grid_num,\n          allow: this.state.allow,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js"],"names":["Board","React","paste","Game","Component","constructor","props","state","history","squares","Array","fill","stepNumber","xIsNext","grid_num","allow","handleInput","bind","handleButton","calculateWinner","n","parseInt","patterns","i","temp","slice","push","j","console","log","length","emptyboard","every","val","winnerIsX","winnerIsO","e","setState","target","value","handleClick","current","concat","jumpTo","step","render","winner","moves","map","move","desc","status"],"mappings":"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","sourcesContent":["import Board from \"./Board\"\nimport React from \"react\";\nimport { paste } from \"@testing-library/user-event/dist/paste\";\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: [{\n            squares: Array(3).fill(null),\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num : 0,\n          allow: false,\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n    }\n\n    calculateWinner(squares) {\n      let n = parseInt(this.state.grid_num)\n      let patterns = []\n     \n      //horizontal\n      for(let i=0; i<(n*n); i=i+n){\n        let temp = []\n        temp = squares.slice(i, i+n)\n        patterns.push(temp)\n      }\n\n      //vertical\n      for(let i=0; i<n; i++){\n        let temp = []\n        for(let j=0; j<n; j++){\n          temp.push(patterns[j][i])\n        }\n        patterns.push(temp)\n      }\n\n      //diagonal\n      let temp = []\n      for(let i=0; i<n; i++){\n        temp.push(patterns[i][i])\n      }\n      patterns.push(temp)\n\n      //anti-diagonal\n      temp = []\n      for(let i=0; i<n; i++){\n        temp.push(patterns[i][n-i-1])\n      }\n      patterns.push(temp)\n\n      //debug\n      console.log(patterns.length)             //2*n+2\n      for(let i=0; i<patterns.length; i++){\n        console.log(patterns[i])\n      }\n\n      //check winner\n      for(let i=0; i<patterns.length; i++){\n        let emptyboard = patterns[i].every(val => val==null)\n        let winnerIsX = patterns[i].every(val => val==\"X\")\n        let winnerIsO = patterns[i].every(val => val==\"O\")\n        if(winnerIsX){\n          if(emptyboard){\n            return null\n          }\n          return(\"X\")\n        }\n        else if(winnerIsO){\n          if(emptyboard){\n            return null\n          }\n          return(\"O\")\n        }\n      }\n      return null\n    }\n\n    handleInput(e){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(e.target.value*e.target.value).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num: e.target.value,\n          allow: false\n        })\n        \n    }\n\n    handleButton(){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(this.state.grid_num*this.state.grid_num).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          allow: true\n        })\n    }\n   \n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares) || squares[i]) {\n          return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n          history: history.concat([{\n            squares: squares,\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n      });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = this.calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n          const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n          return (\n            <li>\n              <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        });\n\n        let status;\n        if (winner) {\n        status = 'Winner: ' + winner;\n        } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n              <div className=\"input\">\n                <input\n                  type=\"number\"\n                  name=\"inputField\"\n                  onChange={this.handleInput}\n                  value={this.state.grid_num}\n                  min={3}\n                  // ref={node => (this.inputNode = node)}\n                />\n                <button onClick={this.handleButton} className=\"btn btn-success\">\n                  Create\n                </button>\n              </div>\n              <div className=\"game-board\">\n                <Board\n                  squares={current.squares}\n                  grid_num={this.state.grid_num}\n                  allow={this.state.allow}\n                  onClick={(i) => this.handleClick(i)}\n                />\n              </div>\n              <div className=\"game-info\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n              </div>\n            </div>\n        );\n    }\n  }\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}