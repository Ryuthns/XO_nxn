{"ast":null,"code":"var _jsxFileName = \"/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js\";\nimport Board from \"./Board\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(3).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: 0,\n      allow: false\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n  calculateWinner(squares, dimension) {\n    const rows = new Array(dimension * dimension).fill(0);\n    const cols = new Array(dimension * dimension).fill(0);\n    const diag = new Array(2).fill(0); // loop over each cell of the board\n\n    for (let row = 0; row < dimension; row++) {\n      for (let col = 0; col < dimension; col++) {\n        // get the element via index calculation y * width + x \n        const square = squares[row * dimension + col]; // increment for player one\n\n        if (square === \"X\") {\n          rows[row]++;\n          cols[col]++;\n        } // decrement for player two\n        else if (square === \"O\") {\n          rows[row]--;\n          cols[col]--;\n        } // check diagonal\n\n\n        if (row === col) diag[0] += square === \"X\" ? 1 : -1; // check anti diagonal\n\n        if (row === dimension - col - 1) diag[1] += square === \"X\" ? 1 : -1;\n      }\n    } // check if any of the rows or columns are completed by either player\n\n\n    for (let i = 0; i < dimension; i++) {\n      // row/col contains the value of the dimension\n      // if and only if the whole row/col only contains 'X' values\n      // and therefore get incremented each time a cell\n      // in that row/col gets looked at above\n      if (rows[i] === dimension || cols[i] === dimension) return \"X\";else if (rows[i] === -dimension || cols[i] === -dimension) return \"O\";\n    } // same as with the rows/cols but since there are only two diagonals,\n    // do this right here\n\n\n    if (diag[0] === dimension || diag[1] === dimension) return \"X\";else if (diag[0] === -dimension || diag[1] === -dimension) return \"O\"; // otherwise no winner is found\n\n    return null;\n  } // calculateWinner(squares) {\n  //   let length = this.state.grid_num\n  //   let needed = length-1\n  //   const lines = []\n  //   //horizontal\n  //   for (let i = 0; i < length*length; i+=length) {\n  //       for (let j = 0; j < length; j++)\n  //         if(squares[i][j] === squares[i][j+1]){\n  //           lines.push([])\n  //         } \n  //   }\n  //    //vertical\n  //    for (let i = 0; i < length; i++) {\n  //  }\n  //   //diagonal upper left - lower right\n  //   for (let i = 0; i < length; i++) {\n  //   }\n  //   //diagonal lower left - upper right\n  //    for (let i = 0; i < length; i++) {\n  //   }\n  //   // const lines = [\n  //   //   [0, 1, 2],\n  //   //   [3, 4, 5],\n  //   //   [6, 7, 8],\n  //   //   [0, 3, 6],\n  //   //   [1, 4, 7],\n  //   //   [2, 5, 8],\n  //   //   [0, 4, 8],\n  //   //   [2, 4, 6],\n  //   // ];\n  //   // for (let i = 0; i < lines.length; i++) {\n  //   //   const [a, b, c] = lines[i];\n  //   //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n  //   //     return squares[a];\n  //   //   }\n  //   // }\n  //   return null;\n  // }\n\n\n  handleInput(e) {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(e.target.value * e.target.value).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      grid_num: e.target.value,\n      allow: false\n    });\n  }\n\n  handleButton() {\n    this.setState({ ...this.state,\n      history: [{\n        squares: Array(this.state.grid_num * this.state.grid_num).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      allow: true\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"inputField\",\n          onChange: this.handleInput,\n          min: 3 // ref={node => (this.inputNode = node)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButton,\n          className: \"btn btn-success\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          grid_num: this.state.grid_num,\n          allow: this.state.allow,\n          onClick: i => this.handleClick(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/home/ryuthns/Desktop/Coding/XO_nxn/src/Game.js"],"names":["Board","React","Game","Component","constructor","props","state","history","squares","Array","fill","stepNumber","xIsNext","grid_num","allow","handleInput","bind","handleButton","calculateWinner","dimension","rows","cols","diag","row","col","square","i","e","setState","target","value","handleClick","slice","current","length","concat","jumpTo","step","render","winner","moves","map","move","desc","status"],"mappings":"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","sourcesContent":["import Board from \"./Board\"\nimport React from \"react\";\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: [{\n            squares: Array(3).fill(null),\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num : 0,\n          allow: false,\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    calculateWinner(squares: string[], dimension){\n      const rows = new Array(dimension*dimension).fill(0);\n      const cols = new Array(dimension*dimension).fill(0);\n      const diag = new Array(2).fill(0);\n    \n      // loop over each cell of the board\n      for (let row = 0; row < dimension; row++) {\n        for (let col = 0; col < dimension; col++) {\n    \n          // get the element via index calculation y * width + x \n          const square = squares[row * dimension + col];\n    \n          // increment for player one\n          if (square === \"X\") {\n            rows[row]++;\n            cols[col]++;\n          }\n          // decrement for player two\n          else if (square === \"O\") {\n            rows[row]--;\n            cols[col]--;\n          }\n    \n          // check diagonal\n          if (row === col) \n            diag[0] += square === \"X\" ? 1 : -1;\n    \n          // check anti diagonal\n          if (row === dimension - col - 1) \n            diag[1] += square === \"X\" ? 1 : -1;\n        }\n      }\n    \n      // check if any of the rows or columns are completed by either player\n      for (let i = 0; i < dimension; i++) {\n        // row/col contains the value of the dimension\n        // if and only if the whole row/col only contains 'X' values\n        // and therefore get incremented each time a cell\n        // in that row/col gets looked at above\n        if (rows[i] === dimension || cols[i] === dimension) \n            return \"X\";\n        else if (rows[i] === -dimension || cols[i] === -dimension) \n            return \"O\";\n      }\n    \n      // same as with the rows/cols but since there are only two diagonals,\n      // do this right here\n      if (diag[0] === dimension || diag[1] === dimension) \n        return \"X\";\n      else if (diag[0] === -dimension || diag[1] === -dimension) \n        return \"O\";\n    \n      // otherwise no winner is found\n      return null;\n    }\n    // calculateWinner(squares) {\n    //   let length = this.state.grid_num\n    //   let needed = length-1\n    //   const lines = []\n\n    //   //horizontal\n    //   for (let i = 0; i < length*length; i+=length) {\n    //       for (let j = 0; j < length; j++)\n    //         if(squares[i][j] === squares[i][j+1]){\n    //           lines.push([])\n    //         } \n    //   }\n\n    //    //vertical\n    //    for (let i = 0; i < length; i++) {\n        \n    //  }\n  \n    //   //diagonal upper left - lower right\n    //   for (let i = 0; i < length; i++) {\n         \n    //   }\n  \n    //   //diagonal lower left - upper right\n    //    for (let i = 0; i < length; i++) {\n      \n    //   }\n    \n      \n    //   // const lines = [\n    //   //   [0, 1, 2],\n    //   //   [3, 4, 5],\n    //   //   [6, 7, 8],\n    //   //   [0, 3, 6],\n    //   //   [1, 4, 7],\n    //   //   [2, 5, 8],\n    //   //   [0, 4, 8],\n    //   //   [2, 4, 6],\n    //   // ];\n    //   // for (let i = 0; i < lines.length; i++) {\n    //   //   const [a, b, c] = lines[i];\n    //   //   if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    //   //     return squares[a];\n    //   //   }\n    //   // }\n    //   return null;\n    // }\n\n    handleInput(e){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(e.target.value*e.target.value).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          grid_num: e.target.value,\n          allow: false\n        })\n        \n    }\n\n    handleButton(){\n        this.setState({...this.state,\n          history: [{\n            squares: Array(this.state.grid_num*this.state.grid_num).fill(null)\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n          allow: true\n        })\n    }\n   \n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares) || squares[i]) {\n          return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n          history: history.concat([{\n            squares: squares,\n          }]),\n          stepNumber: history.length,\n          xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n      });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = this.calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n          const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n          return (\n            <li>\n              <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          );\n        });\n\n        let status;\n        if (winner) {\n        status = 'Winner: ' + winner;\n        } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n              <div className=\"input\">\n                <input\n                  type=\"number\"\n                  name=\"inputField\"\n                  onChange={this.handleInput}\n                  min={3}\n                  // ref={node => (this.inputNode = node)}\n                />\n                <button onClick={this.handleButton} className=\"btn btn-success\">\n                  Create\n                </button>\n              </div>\n              <div className=\"game-board\">\n                <Board\n                  squares={current.squares}\n                  grid_num={this.state.grid_num}\n                  allow={this.state.allow}\n                  onClick={(i) => this.handleClick(i)}\n                />\n              </div>\n              <div className=\"game-info\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n              </div>\n            </div>\n        );\n    }\n  }\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}